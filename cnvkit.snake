configfile: "conf/config.yaml"

# make sure there is a ref panel sample list of a prebuild .cnn file provided
num_missing=0
filler_files_to_expect = []
if 'ref_samples' not in config:
	config['ref_samples'] = 'ref_samps_not_needed.txt'
	filler_files_to_expect.append('ref_samps_not_needed.txt')
	num_missing+=1
if 'cnn_ref' not in config:
	config['cnn_ref'] = 'cnn_ref_not_needed.txt'
	filler_files_to_expect.append('cnn_ref_not_needed.txt')
	num_missing+=1

print(config)
if num_missing != 1 :
	print('Error, you must provide a config value for either ref_samples xor cnn_ref not both.')


if config['ref_samples'] == 'samps_not_needed.txt':
	ref_samp_path = []
	ref_samps = []
	BAIT_FILE = 'not_needed.txt'
        REF_GENOME = 'not_needed.txt'
        ACCESS_HG = 'not_needed.txt'
	filler_files_to_expect.append('not_needed.txt')
else:
	BAIT_FILE = config['bait']
	REF_GENOME = config['ref_genome']
	ACCESS_HG = config['access']
	ref_samp_path = config['ref_samples']
	ref_samps = [l.strip().split('/')[-1].replace('.bam','') for l in open(ref_samp_path,'r')]

CNN_REF = config['cnn_ref']
non_ref_path = config['samples']
non_ref_samps = [l.strip().split('/')[-1].replace('.bam','') for l in open(non_ref_path,'r')]

"""
How to run with command line params
NOTE: file paths need to be absolute not relative
snakemake -s new_cnvkit.snake --cores 64 --config ref_samples="ref_samples.example.txt" samples="samples.example.txt" bait="SureSelect_All_Exon_V2.bed" ref_genome="/scratch/Shares/layer/ref/hg37/human_g1k_v37.fasta" access="/scratch/Shares/layer/ref/hg37/access-5k-mappable.grch37.bed"

"""

rule all:
        input:
                'CNVkitResults'

rule create_symlink_script:
	output:
		'symlink_files.sh',
		' '.join(filler_files_to_expect)
	run:
		for x in filler_files_to_expect:
			shell('touch {}'.format(x))
		with open('symlink_files.sh','w') as outfile:
			if config['ref_samples'] != 'ref_samps_not_needed.txt':
				for line in open(config['ref_samples'],'r'):
					fname = line.split('/')[-1]
					outfile.write('ln -f -s {} RefSamps/{}\n'.format(line.strip(),fname))
					outfile.write('ln -f -s {} RefSamps/{}\n'.format(line.strip().replace('.bam','.bai'),fname.replace('.bam','.bai')))
			for line in open(config['samples'],'r'):
				fname = line.split('/')[-1]
				outfile.write('ln -f -s {} NonRefSamps/{}\n'.format(line.strip(),fname))
				outfile.write('ln -f -s {} NonRefSamps/{}\n'.format(line.strip().replace('.bam','.bai'),fname.replace('.bam','.bai')))

rule symlink_files:
	input:
		'symlink_files.sh'
	output:
		sbam = expand('NonRefSamps/{sample}.bam',sample=non_ref_samps),
		sbai = expand('NonRefSamps/{sample}.bai',sample=non_ref_samps),
	shell:
		"""
		mkdir -p RefSamps
		mkdir -p NonRefSamps
		bash symlink_files.sh
		"""

rule call:
	input:
 		sbams=expand('NonRefSamps/{sample}.bam',sample=non_ref_samps),
		sbais=expand('NonRefSamps/{sample}.bai',sample=non_ref_samps),
		ref_hg=REF_GENOME,
		bait=BAIT_FILE,
		access_hg=ACCESS_HG,
		cnn_ref=CNN_REF
	output:
		outdir=directory('CNVkitResults')
	threads: 2
	run:
		if config['ref_samples'] != 'Missing':
			print('Not Missing')
			shell("""
				mkdir -p Example
				cnvkit.py batch NonRefSamps/*bam \
					--normal RefSamps/*bam  \
					--targets {input.bait} --fasta {input.ref_hg} \
					--access {input.access_hg} \
					--output-reference 'ref_panel.cnn' --output-dir {output.outdir} \
					-p {workflow.cores}
				""")
		else:
			print('Missing')
			shell("""
				mkdir -p Example
				cnvkit.py batch NonRefSamps/*bam \
					-r {input.cnn_ref} \
					--output-dir {output.outdir} \
					-p {workflow.cores}
                		""")
